name: Go CI

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  actions: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go (from go.mod)
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Cache Go Build
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod tidy

      - name: Verify Modules
        run: go mod verify

      - name: Build
        run: go build -o ogem -trimpath -ldflags="-s -w" ./cmd/

      - name: Run Tests in Parallel
        run: go test -v -p=8 -race -coverprofile=coverage.out -json > test-results.json

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: go-test-results
          path: test-results.json

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

      # - name: Upload Coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: coverage.out
      #     flags: unittests
      #     fail_ci_if_error: true

      - name: Run Benchmarks
        run: go test -bench=. -benchmem > benchmark.txt

      - name: Upload Benchmark Results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt

      - name: Upload Compiled Binary
        uses: actions/upload-artifact@v4
        with:
          name: ogem
          path: ogem

  # docker-build:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Login to DockerHub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Build Docker Image
  #       run: docker build -t your-image-name .

  #     - name: Push Image to DockerHub
  #       run: docker push your-image-name

  # release:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Auto Tagging
  #       id: tag
  #       uses: anothrNick/github-tag-action@1.67.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         DEFAULT_BUMP: patch

  #     - name: Create GitHub Release
  #       uses: softprops/action-gh-release@v2
  #       with:
  #         tag_name: ${{ steps.tag.outputs.new_tag }}
  #         name: Release ${{ steps.tag.outputs.new_tag }}
  #         draft: false
  #         prerelease: false
  #         files: ogem

  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: release
  #   steps:
  #     - name: Deploy to Production
  #       run: echo "Deploying version ${{ needs.release.outputs.tag }} to production..."
